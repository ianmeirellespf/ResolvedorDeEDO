import numpy as np
import matplotlib.pyplot as plt

def euler_method(t0, tf, dt, x0, v0, f):
    num_steps = int((tf - t0) / dt)
    t = np.linspace(t0, tf, num_steps)
    x = np.zeros_like(t)
    v = np.zeros_like(t)
    x[0] = x0
    v[0] = v0

    for i in range(1, num_steps):
        v[i] = v[i-1] + dt * f(t[i-1], x[i-1])
        x[i] = x[i-1] + dt * v[i-1]
    
    return t, x

def verlet_method(t0, tf, dt, x0, v0, f):
    num_steps = int((tf - t0) / dt)
    t = np.linspace(t0, tf, num_steps)
    x = np.zeros_like(t)
    v = np.zeros_like(t)
    x[0] = x0
    v[0] = v0

    for i in range(1, num_steps):
        x[i] = x[i-1] + dt * v[i-1] + 0.5 * dt**2 * f(t[i-1], x[i-1])
        v[i] = v[i-1] + 0.5 * dt * (f(t[i-1], x[i-1]) + f(t[i], x[i]))
    
    return t, x

def runge_kutta_method(t0, tf, dt, x0, v0, f):
    num_steps = int((tf - t0) / dt)
    t = np.linspace(t0, tf, num_steps)
    x = np.zeros_like(t)
    v = np.zeros_like(t)
    x[0] = x0
    v[0] = v0

    for i in range(1, num_steps):
        k11 = dt * v[i-1]
        k12 = dt * f(t[i-1], x[i-1])
        k21 = dt * v[i-1] + 0.5*k11
        k22 = dt * f(t[i-1] + 0.5*dt, x[i-1] + 0.5*k12)
        k31 = dt * v[i-1] + 0.5*k21
        k32 = dt * f(t[i-1] + 0.5*dt, x[i-1] + 0.5*k22)
        k41 = dt * v[i-1] + k31
        k42 = dt * f(t[i-1] + dt, x[i-1] + k32)
        v[i] = v[i-1] + (k12 + 2*k22 + 2*k32 + k42) / 6
        x[i] = x[i-1] + (k11 + 2*k21 + 2*k31 + k41) / 6
    
    return t, x

def leapfrog_method(t0, tf, dt, x0, v0, f):
    num_steps = int((tf - t0) / dt)
    t = np.linspace(t0, tf, num_steps)
    x = np.zeros_like(t)
    v = np.zeros_like(t)
    x[0] = x0
    v[0] = v0

    for i in range(1, num_steps):
        x[i] = x[i-1] + dt * v[i-1] + 0.5 * dt**2 * f(t[i-1], x[i-1])
        v[i] = v[i-1] + dt * (f(t[i-1], x[i-1]) + f(t[i], x[i])) / 2
    
    return t, x

# Exemplo de EDO
# Exemplo de EDO - Movimento Harmônico Simples
def f(t, x):
    k = 1.0  # constante da mola
    m = 1.0  # massa
    return -k * x / m

# Parâmetros iniciais
t0 = 0.0
tf = 10.0
dt = 0.01
x0 = 1.0  # posição inicial
v0 = 0.0  # velocidade inicial

# Resolvendo usando o método de Euler
t_euler, x_euler = euler_method(t0, tf, dt, x0, v0, f)
# Resolvendo usando o método de Verlet
t_verlet, x_verlet = verlet_method(t0, tf, dt, x0, v0, f)
# Resolvendo usando o método de Runge-Kutta
t_rk4, x_rk4 = runge_kutta_method(t0, tf, dt, x0, v0, f)
# Resolvendo usando o método de Leapfrog
t_leapfrog, x_leapfrog = leapfrog_method(t0, tf, dt, x0, v0, f)

# Plotando os resultados
plt.plot(t_euler, x_euler,'m--',color= 'green', label='Euler')
plt.plot(t_verlet, x_verlet,color= 'blue', label='Verlet')
plt.plot(t_rk4, x_rk4,color= 'red', label='Runge-Kutta')
plt.plot(t_leapfrog, x_leapfrog,'m--',color= 'magenta', label='Leapfrog')
plt.xlabel('Tempo')
plt.ylabel('Posição')
plt.legend()
plt.show()